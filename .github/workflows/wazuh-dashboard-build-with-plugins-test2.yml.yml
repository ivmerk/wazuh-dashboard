name: Build Wazuh dashboard with plugins

on:
  workflow_dispatch:
    inputs:
      system:
        type: choice
        description: 'Package OS'
        required: true
        options: [deb, rpm]
        default: deb
      architecture:
        type: choice
        description: 'Package architecture'
        required: true
        options: [amd64, x86_64, aarch64, arm64]
        default: amd64
      revision:
        type: string
        description: 'Package revision'
        required: true
        default: '0'
      reference_security_plugins:
        type: string
        required: true
        default: master
      reference_wazuh_plugins:
        type: string
        required: true
        default: master
      is_stage:
        type: boolean
        required: true
        default: false
      checksum:
        type: boolean
        required: true
        default: false
      id:
        type: string
        required: false

jobs:
  setup-variables:
    runs-on: ubuntu-24.04
    outputs:
      CURRENT_DIR: ${{ steps.vars.outputs.CURRENT_DIR }}
      VERSION: ${{ steps.vars.outputs.VERSION }}
      REVISION: ${{ steps.vars.outputs.REVISION }}
      COMMIT_SHA: ${{ steps.vars.outputs.COMMIT_SHA }}
      PLUGINS_SHA: ${{ steps.vars.outputs.PLUGINS_SHA }}
      SECURITY_SHA: ${{ steps.vars.outputs.SECURITY_SHA }}
      PRODUCTION: ${{ steps.vars.outputs.PRODUCTION }}
      PACKAGE_NAME: ${{ steps.vars.outputs.PACKAGE_NAME }}
      ARCHITECTURE_FLAG: ${{ steps.vars.outputs.ARCHITECTURE_FLAG }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get plugin SHAs
        id: shas
        run: |
          git clone -b ${{ inputs.reference_wazuh_plugins }} --single-branch https://github.com/ivmerk/wazuh-dashboard-plugins.git plugins
          echo "PLUGINS_SHA=$(cd plugins && git rev-parse --short HEAD)" >> $GITHUB_ENV

          git clone -b ${{ inputs.reference_security_plugins }} --single-branch https://github.com/ivmerk/wazuh-security-dashboards-plugin.git security
          echo "SECURITY_SHA=$(cd security && git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set build variables
        id: vars
        run: |
          CURRENT_DIR=$(pwd)
          VERSION=$(jq -r '.version' VERSION.json)
          REVISION=${{ inputs.revision }}
          COMMIT_SHA=$(git rev-parse --short HEAD)
          PLUGINS_SHA=${{ env.PLUGINS_SHA }}
          SECURITY_SHA=${{ env.SECURITY_SHA }}
          IS_STAGE="${{ inputs.is_stage }}"
          SYSTEM="${{ inputs.system }}"
          ARCH="${{ inputs.architecture }}"

          if [[ "$IS_STAGE" == "true" ]]; then
            PRODUCTION="--production"
          else
            PRODUCTION=""
          fi

          if [[ "$SYSTEM" == "deb" ]]; then
            NAME="wazuh-dashboard_${VERSION}-${REVISION}_${ARCH}"
            [ "$IS_STAGE" != "true" ] && NAME="${NAME}_${COMMIT_SHA}-${PLUGINS_SHA}-${SECURITY_SHA}"
            PACKAGE_NAME="${NAME}.deb"
          else
            NAME="wazuh-dashboard-${VERSION}-${REVISION}.${ARCH}"
            [ "$IS_STAGE" != "true" ] && NAME="wazuh-dashboard_${VERSION}-${REVISION}_${ARCH}_${COMMIT_SHA}-${PLUGINS_SHA}-${SECURITY_SHA}"
            PACKAGE_NAME="${NAME}.rpm"
          fi

          if [[ "$ARCH" == "x86_64" || "$ARCH" == "amd64" ]]; then
            ARCHITECTURE_FLAG=""
          else
            ARCHITECTURE_FLAG="--arm"
          fi

          echo "CURRENT_DIR=$CURRENT_DIR" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "REVISION=$REVISION" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "PLUGINS_SHA=$PLUGINS_SHA" >> $GITHUB_OUTPUT
          echo "SECURITY_SHA=$SECURITY_SHA" >> $GITHUB_OUTPUT
          echo "PRODUCTION=$PRODUCTION" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "ARCHITECTURE_FLAG=$ARCHITECTURE_FLAG" >> $GITHUB_OUTPUT

  build-and-package:
    needs: setup-variables
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'

      - name: Prepare dummy plugin artifacts (замени на download-artifact при необходимости)
        run: |
          mkdir -p artifacts/plugins artifacts/security-plugin artifacts/dashboard
          echo "dummy" > artifacts/plugins/plugin.zip
          echo "dummy" > artifacts/security-plugin/plugin.zip
          echo "dummy" > artifacts/dashboard/dashboard.tar.gz

      - name: Zip plugins
        run: |
          zip -r -j artifacts/wazuh-package.zip artifacts/plugins
          zip -r -j artifacts/security-package.zip artifacts/security-plugin
          zip -r -j artifacts/dashboard-package.zip artifacts/dashboard

      - name: Build package
        run: |
          cd dev-tools/build-packages || exit 1
          bash build-packages.sh \
            -r ${{ needs.setup-variables.outputs.REVISION }} \
            ${{ needs.setup-variables.outputs.ARCHITECTURE_FLAG }} \
            -a file://${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/wazuh-package.zip \
            -s file://${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/security-package.zip \
            -b file://${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/dashboard-package.zip \
            --commit-sha ${{ needs.setup-variables.outputs.COMMIT_SHA }}-${{ needs.setup-variables.outputs.PLUGINS_SHA }}-${{ needs.setup-variables.outputs.SECURITY_SHA }} \
            --${{ inputs.system }} ${{ needs.setup-variables.outputs.PRODUCTION }}

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.PACKAGE_NAME }}
          path: dev-tools/build-packages/output/${{ needs.setup-variables.outputs.PACKAGE_NAME }}
